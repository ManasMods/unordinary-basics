buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
//As described in https://mcforge.readthedocs.io/en/1.18.x/gettingstarted/versioning/#examples
version = "${minecraftVersion}-${modVersion}"
group = 'com.github.manasmods' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modId}"


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

ext {
    if (!project.hasProperty('manasmodsUsername')) {
        System.out.println("No ManasMods Repo User found.")
        //DO NOT WRITE ANYTHING INTO THIS FIELD! ANYONE CEN SEE THIS FIELD!!
        manasmodsUsername = ""
    }

    if (!project.hasProperty('manasmodsPassword')) {
        System.out.println("No ManasMods Repo User password found.")
        //DO NOT WRITE ANYTHING INTO THIS FIELD! ANYONE CEN SEE THIS FIELD!!
        manasmodsPassword = ""
    }
}

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"


    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                unordinary_basics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                unordinary_basics {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')


            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', "manascore"

            mods {
                unordinary_basics {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modId}"

            mods {
                unordinary_basics {
                    source sourceSets.main
                    source sourceSets.test
                }
            }

            forceExit false
        }
    }
}

mixin {
    add sourceSets.main, "${modId}.refmap.json"

    config "${modId}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://dl.cloudsmith.io/public/manasmods/manascore/maven/" }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'}

    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven { url 'https://jitpack.io' }

    maven { url 'https://maven.blamejared.com' }


    /*
    flatDir {
        dir 'libs'
    }
     */

    dependencies {
        //Forge
        minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

        //Lombok
        compileOnly 'org.projectlombok:lombok:1.18.28'
        annotationProcessor 'org.projectlombok:lombok:1.18.28'

        implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
        //annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")

        //ManasCore
        implementation fg.deobf("com.github.manasmods:ManasCore:${minecraftVersion}-${manasCoreVersion}")

        //Mixin Anntoation Processor
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

        compileOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-common-api:${jei_version}"))
        compileOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-forge-api:${jei_version}"))
        runtimeOnly(fg.deobf("mezz.jei:jei-${minecraftVersion}-forge:${jei_version}"))

        // Apotheosis + dependencies
        compileOnly fg.deobf("curse.maven:apotheosis-313970:${apotheosisVersion}")
        compileOnly fg.deobf("curse.maven:placebo-283644:${placeboVersion}")
        compileOnly fg.deobf("curse.maven:patchouli-306770:${patchouliVersion}")
        compileOnly fg.deobf("curse.maven:enchantment-descriptions-250419:${enchantmentDescriptionsVersion}")
        compileOnly fg.deobf("curse.maven:bookshelf-228525:${bookshelfVersion}")
        runtimeOnly fg.deobf("curse.maven:apotheosis-313970:${apotheosisVersion}")
        runtimeOnly fg.deobf("curse.maven:placebo-283644:${placeboVersion}")
        runtimeOnly fg.deobf("curse.maven:patchouli-306770:${patchouliVersion}")
        runtimeOnly fg.deobf("curse.maven:enchantment-descriptions-250419:${enchantmentDescriptionsVersion}")
        runtimeOnly fg.deobf("curse.maven:bookshelf-228525:${bookshelfVersion}")

        // Geckolib
        //implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraftVersion}:${geckolibVersion}")

        // Worldedit for easier Building
        runtimeOnly fg.deobf("curse.maven:worldedit-225608:3922622")

        // MmmMmmMmmMmm (Target Dummy) for Attribute and DMG Tests
        runtimeOnly fg.deobf("curse.maven:TargetDummy-225738:4410143")
        runtimeOnly fg.deobf("curse.maven:TargetDummyLib-499980:4414538")
    }

// Example for how to get properties into the manifest for reading at runtime.
    jar {
        manifest {
            attributes([
                    "Specification-Title"     : "unordinary_basics",
                    "Specification-Vendor"    : "unordinary_basicssareus",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : modVersion,
                    "Implementation-Vendor"   : "unordinary_basicssareus",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
    jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
            }
        }
        repositories {
            maven {
                name = "manasmods"
                credentials {
                    username System.getenv().getOrDefault("MANAS_REPO_USER", manasmodsUsername)
                    password System.getenv().getOrDefault("MANAS_REPO_USER_PASSWORD", manasmodsPassword)
                }
                url "https://manasmods.bytesafe.dev/maven/manasmods"
            }
        }
    }

    def replaceResources = tasks.register("replaceResources", Copy) {
        it.outputs.upToDateWhen { false }
        //Copy it into the build dir
        it.from(sourceSets.main.resources) {
            def forgeLoaderVersion = forgeVersion.substring(0, forgeVersion.indexOf('.'))
            def manasVersionCheck = "[${manasCoreVersion},)"
            def patchouliVersionCheck = "${patchouliVersionCheck}"

            include "META-INF/mods.toml"
            expand 'modVersion': "${modVersion}", 'forgeLoaderVersion': "[${forgeLoaderVersion},)", 'minecraftVersionCheck': "${minecraftVersionCheck}", 'manasVersionCheck': "${manasVersionCheck}", 'patchouliVersionCheck': "${patchouliVersionCheck}"
        }
        it.into "$buildDir/resources/main/"
    }

    processResources {
        duplicatesStrategy(DuplicatesStrategy.FAIL)
        exclude('META-INF/mods.toml')
        configure { finalizedBy(replaceResources) }
    }

    classes.configure {
        dependsOn(replaceResources)
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}